// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arttet/rock-paper-scissors-lizard-spock/internal/app/game-service/service/random (interfaces: RandomGenerator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomGenerator is a mock of RandomGenerator interface.
type MockRandomGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomGeneratorMockRecorder
}

// MockRandomGeneratorMockRecorder is the mock recorder for MockRandomGenerator.
type MockRandomGeneratorMockRecorder struct {
	mock *MockRandomGenerator
}

// NewMockRandomGenerator creates a new mock instance.
func NewMockRandomGenerator(ctrl *gomock.Controller) *MockRandomGenerator {
	mock := &MockRandomGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomGenerator) EXPECT() *MockRandomGeneratorMockRecorder {
	return m.recorder
}

// GetRandomNumber mocks base method.
func (m *MockRandomGenerator) GetRandomNumber(arg0 context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomNumber", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRandomNumber indicates an expected call of GetRandomNumber.
func (mr *MockRandomGeneratorMockRecorder) GetRandomNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomNumber", reflect.TypeOf((*MockRandomGenerator)(nil).GetRandomNumber), arg0)
}
