// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arttet/rock-paper-scissors-lizard-spock/internal/app/game-service/service/rpsls (interfaces: RockPaperScissorsLizardSpockGame)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/arttet/rock-paper-scissors-lizard-spock/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRockPaperScissorsLizardSpockGame is a mock of RockPaperScissorsLizardSpockGame interface.
type MockRockPaperScissorsLizardSpockGame struct {
	ctrl     *gomock.Controller
	recorder *MockRockPaperScissorsLizardSpockGameMockRecorder
}

// MockRockPaperScissorsLizardSpockGameMockRecorder is the mock recorder for MockRockPaperScissorsLizardSpockGame.
type MockRockPaperScissorsLizardSpockGameMockRecorder struct {
	mock *MockRockPaperScissorsLizardSpockGame
}

// NewMockRockPaperScissorsLizardSpockGame creates a new mock instance.
func NewMockRockPaperScissorsLizardSpockGame(ctrl *gomock.Controller) *MockRockPaperScissorsLizardSpockGame {
	mock := &MockRockPaperScissorsLizardSpockGame{ctrl: ctrl}
	mock.recorder = &MockRockPaperScissorsLizardSpockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRockPaperScissorsLizardSpockGame) EXPECT() *MockRockPaperScissorsLizardSpockGameMockRecorder {
	return m.recorder
}

// GetChoice mocks base method.
func (m *MockRockPaperScissorsLizardSpockGame) GetChoice(arg0 context.Context) *model.Choice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChoice", arg0)
	ret0, _ := ret[0].(*model.Choice)
	return ret0
}

// GetChoice indicates an expected call of GetChoice.
func (mr *MockRockPaperScissorsLizardSpockGameMockRecorder) GetChoice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChoice", reflect.TypeOf((*MockRockPaperScissorsLizardSpockGame)(nil).GetChoice), arg0)
}

// GetChoices mocks base method.
func (m *MockRockPaperScissorsLizardSpockGame) GetChoices() model.Choices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChoices")
	ret0, _ := ret[0].(model.Choices)
	return ret0
}

// GetChoices indicates an expected call of GetChoices.
func (mr *MockRockPaperScissorsLizardSpockGameMockRecorder) GetChoices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChoices", reflect.TypeOf((*MockRockPaperScissorsLizardSpockGame)(nil).GetChoices))
}

// PlayRound mocks base method.
func (m *MockRockPaperScissorsLizardSpockGame) PlayRound(arg0 context.Context, arg1 int32) model.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayRound", arg0, arg1)
	ret0, _ := ret[0].(model.Result)
	return ret0
}

// PlayRound indicates an expected call of PlayRound.
func (mr *MockRockPaperScissorsLizardSpockGameMockRecorder) PlayRound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayRound", reflect.TypeOf((*MockRockPaperScissorsLizardSpockGame)(nil).PlayRound), arg0, arg1)
}
