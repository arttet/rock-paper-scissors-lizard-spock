// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rpsls/game_service/v1/game_service.proto

package game_service

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameServiceClient interface {
	// Get all the choices that are usable for the UI
	GetChoicesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get a randomly generated choice
	GetChoiceV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChoiceV1Response, error)
	// Play a round against a computer opponent
	PlayRoundV1(ctx context.Context, in *PlayRoundV1Request, opts ...grpc.CallOption) (*PlayRoundV1Response, error)
}

type gameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameServiceClient(cc grpc.ClientConnInterface) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) GetChoicesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/rpsls.game_service.v1.GameService/GetChoicesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) GetChoiceV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetChoiceV1Response, error) {
	out := new(GetChoiceV1Response)
	err := c.cc.Invoke(ctx, "/rpsls.game_service.v1.GameService/GetChoiceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) PlayRoundV1(ctx context.Context, in *PlayRoundV1Request, opts ...grpc.CallOption) (*PlayRoundV1Response, error) {
	out := new(PlayRoundV1Response)
	err := c.cc.Invoke(ctx, "/rpsls.game_service.v1.GameService/PlayRoundV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServiceServer is the server API for GameService service.
// All implementations must embed UnimplementedGameServiceServer
// for forward compatibility
type GameServiceServer interface {
	// Get all the choices that are usable for the UI
	GetChoicesV1(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	// Get a randomly generated choice
	GetChoiceV1(context.Context, *emptypb.Empty) (*GetChoiceV1Response, error)
	// Play a round against a computer opponent
	PlayRoundV1(context.Context, *PlayRoundV1Request) (*PlayRoundV1Response, error)
	mustEmbedUnimplementedGameServiceServer()
}

// UnimplementedGameServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameServiceServer struct {
}

func (UnimplementedGameServiceServer) GetChoicesV1(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoicesV1 not implemented")
}
func (UnimplementedGameServiceServer) GetChoiceV1(context.Context, *emptypb.Empty) (*GetChoiceV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoiceV1 not implemented")
}
func (UnimplementedGameServiceServer) PlayRoundV1(context.Context, *PlayRoundV1Request) (*PlayRoundV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayRoundV1 not implemented")
}
func (UnimplementedGameServiceServer) mustEmbedUnimplementedGameServiceServer() {}

// UnsafeGameServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameServiceServer will
// result in compilation errors.
type UnsafeGameServiceServer interface {
	mustEmbedUnimplementedGameServiceServer()
}

func RegisterGameServiceServer(s grpc.ServiceRegistrar, srv GameServiceServer) {
	s.RegisterService(&GameService_ServiceDesc, srv)
}

func _GameService_GetChoicesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetChoicesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpsls.game_service.v1.GameService/GetChoicesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetChoicesV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_GetChoiceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).GetChoiceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpsls.game_service.v1.GameService/GetChoiceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).GetChoiceV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_PlayRoundV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRoundV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).PlayRoundV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpsls.game_service.v1.GameService/PlayRoundV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).PlayRoundV1(ctx, req.(*PlayRoundV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameService_ServiceDesc is the grpc.ServiceDesc for GameService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpsls.game_service.v1.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChoicesV1",
			Handler:    _GameService_GetChoicesV1_Handler,
		},
		{
			MethodName: "GetChoiceV1",
			Handler:    _GameService_GetChoiceV1_Handler,
		},
		{
			MethodName: "PlayRoundV1",
			Handler:    _GameService_PlayRoundV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpsls/game_service/v1/game_service.proto",
}
